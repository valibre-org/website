---
title: Virto Network
layout: index.liquid
---

<hr class="sticky-hack">
{% include "nav.liquid" active: "", class: "fixed" %}

<aside id="submenu">
	<p>submenu cooming soon</p>
</aside>

<section id="about">
		<ul>
			{% for about in site.data.index.about_list %}	
			<li>
					<h3>
					{{ about.name }}
					</h3>
			</li>
			{% endfor %}
		</ul>
</section>

<section id="communities"> <!-- local comunnities-->
	<article class="max">
		<h2 data-img="img/comunidad.svg">Local Communities</h2>
		<p>{{ site.data.index.community }}</p>
	</article>
</section>

<section id="use-cases">
	<article class="max">
		<h2>Use cases</h2>
		<p>{{ site.data.index.use_cases }}</p>
	</article>
</section>

<section id="for-developers">
	<article class="max">
		<h2>Developers resources</h2>
		<p>{{ site.data.index.developers }}</p>
	</article>
</section>

<section id="blog">
	<article class="max">
		<h2>Blog</h2>
		<button>Developers</button>
		<button>Users</button>
	</article>
</section>

<section id="contact">
	<article class="max">
		<h2>Contact</h2>
		<p>{{ site.data.index.contact }}</p>
	</article>
</section>

<script>
const $ = document.querySelector.bind(document),
	$$ = document.querySelectorAll.bind(document);
const addViewedClass = ([e], ob) => {
	e.target.classList.add('viewed');
	ob.unobserve(e.target);
};
const whenVisible = (elements, fn, opts) => {
	const ob = new IntersectionObserver(fn, opts);
	$$(elements).forEach(e => ob.observe(e));
};
const makeSticky = ([br]) =>
	br.target.nextElementSibling.classList.toggle('fixed', br.intersectionRatio === 1);

whenVisible('main>section', addViewedClass, { threshold: 0.2 });
whenVisible('.sticky-hack', makeSticky, { threshold: [0, 1] });
</script>
